apply plugin: 'com.android.model.native'

def lib_distribution_root = '../distribution'
model {
     repositories {
        libs(PrebuiltLibraries) {
            SDL2 {
                headers.srcDir "../../../sdl2/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/SDL2/lib/${targetPlatform.getName()}/libSDL2.so")
                }
            }
        }
    }

   android {
        compileSdkVersion = $(AndroidAPILevelNumber)
        buildToolsVersion = "$(AndroidBuildToolsVersion)"

        defaultConfig {
            minSdkVersion.apiLevel = 16
            targetSdkVersion.apiLevel = 26
        }
        ndk {
            moduleName = 'main'
            cppFlags.addAll(["-I" + file("../../../sdl2/include/").absolutePath])
            CFlags.addAll(["-I" + file("../../../sdl2/include/").absolutePath])
            stl "stlport_static"
        }

        sources {
            main {
                jni {
                    dependencies {
                        library 'SDL2' linkage 'shared'
                    }
                    source {
						srcDirs 'src/'
                        srcDirs '../../../sdl2/src/main/android/'
                    }
                }
            }
        }

    }
}

// This is just copy out the header file and built lib into distribution
// directory for clint application to use; it is a small overhead of this sample:
//    both lib and app are put inside one project space [save maintenance time]
task(distributeLib, type : Copy) {
    // trigger build library
    dependsOn assemble
    into '../distribution/main/'
    from('build/outputs/native/release/lib') {
        into 'lib/'
    }
}