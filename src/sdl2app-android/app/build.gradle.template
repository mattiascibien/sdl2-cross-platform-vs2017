apply plugin: 'com.android.model.$(ConfigurationType)'


def lib_distribution_root = '../distribution'

model {
	repositories {
		libs(PrebuiltLibraries) {
            SDL2 {
                headers.srcDir "../../../../SDL2/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/SDL2/lib/${targetPlatform.getName()}/libSDL2.so")
                }
            }
            main {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/main/lib/${targetPlatform.getName()}/libmain.so")
                }
            }
		}
	}

    android {
        compileSdkVersion = $(AndroidAPILevelNumber)
        buildToolsVersion = "$(AndroidBuildToolsVersion)"

        defaultConfig.with {
            $(ApplicationId)
            minSdkVersion.apiLevel = 16
            targetSdkVersion.apiLevel = 23
        }

        compileOptions.with {
            sourceCompatibility=JavaVersion.VERSION_1_7
            targetCompatibility=JavaVersion.VERSION_1_7
        }
    }

	android.sources {
		main {
			jni {
				project ':main' linkage 'shared'
			}

		jniLibs {
			 srcDir "${lib_distribution_root}/main/lib"
			}
		}
	}

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
            ndk.debuggable = true
            debuggable = true
        }
    }

    android.productFlavors {
        create("arm7") {
            ndk.abiFilters.add("armeabi-v7a")
        }
        create("arm8") {
            ndk.abiFilters.add("arm64-v8a")
        }
        create("x86") {
            ndk.abiFilters.add("x86")
        }
        create("x86-64") {
            ndk.abiFilters.add("x86_64")
        }
        create("all")
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    $(AarDependencies)
}